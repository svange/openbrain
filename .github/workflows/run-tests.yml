name: Test code
on:
  workflow_call:
permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
env:
  PROJECT: ${{ github.event.repository.name }}
  GITHUBORG: ${{ github.actor }}
  REPOSITORYNAME: ${{ github.event.repository.name }}

  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  AWS_GITHUB_ROLE_ARN: ${{ secrets.AWS_GITHUB_PROD_DEPLOYER_ROLE_ARN }}

  AWS_REGION: us-east-1
  INFRA_STACK_NAME: ai-infra
  SECRET_STORE_FRIENDLY_NAME: DevAiSecrets
  COMMON_ACCESS_POLICY_FRIENDLY_NAME: DevCommonAccessPolicy
  SESSION_TABLE_FRIENDLY_NAME: DevSessionTable
  AGENT_CONFIG_TABLE_FRIENDLY_NAME: DevAgentConfigTable
  LEAD_TABLE_FRIENDLY_NAME: DevLeadTable
  INFRASTRUCTURE_TOPIC_FRIENDLY_NAME: InfrastructureTopic
  BUSINESS_TOPIC_FRIENDLY_NAME: BusinessTopic
  EVENTBUS_FRIENDLY_NAME: DevEventBus
jobs:
  pre-commit-tests:
    uses: ./.github/workflows/pre-commit.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read

#  pytest:
#    strategy:
#      matrix:
#        #        python-version: [ "3.10", "3.11" ]
#        #        platform: [ ubuntu-20.04, macos-latest, windows-latest ]
#        python-version: [ "3.10" ]
#        platform: [ ubuntu-20.04 ]
#    runs-on: ${{ matrix.platform }}
#
#    steps:
#    - name: Configure AWS Credentials
#      uses: aws-actions/configure-aws-credentials@v4
#      with:
#        role-to-assume: ${{ env.AWS_GITHUB_ROLE_ARN }}
#        aws-region: ${{ env.AWS_REGION }}
#      #----------------------------------------------
#      #       check-out repo and set-up python
#      #----------------------------------------------
#    - name: Check out repository
#      uses: actions/checkout@v3
#    - name: Set up python
#      id: setup-python
#      uses: actions/setup-python@v4
#      with:
#        python-version: '3.10'
#      #----------------------------------------------
#      #  -----  install & configure poetry  -----
#      #----------------------------------------------
#    - name: Install Poetry
#
#      uses: snok/install-poetry@v1
#      with:
#        virtualenvs-create: true
#        virtualenvs-in-project: true
#        installer-parallel: true
#
#      #----------------------------------------------
#      #       load cached venv if cache exists
#      #----------------------------------------------
#    - name: Load cached venv
#      id: cached-poetry-dependencies
#      uses: actions/cache@v3
#      with:
#        path: .venv
#        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
#      #----------------------------------------------
#      # install dependencies if cache does not exist
#      #----------------------------------------------
#    - name: Install dependencies
#      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
#      run: poetry install --no-interaction --no-root
#      #----------------------------------------------
#      # install your root project, if required
#      #----------------------------------------------
#    - name: Install project
#      run: poetry install --no-interaction
#
#      #----------------------------------------------
#      #              run test suite
#      #----------------------------------------------
#    - name: Test with pytest
#      run: |
#        source .venv/bin/activate
#        pytest
