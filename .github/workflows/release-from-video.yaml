name: Release
on:
    push:
      branches:
        - master
        - dev

permissions:
    id-token: write
    contents: write
jobs:
  run-tests:
    uses: ./.github/workflows/run-tests.yml
    secrets: inherit
    permissions:
      id-token: write
      contents: read

  release:
    runs-on: ubuntu-latest
    name: Release
    needs: [run-tests]
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
          persist-credentials: false
#          token: ${{ secrets.PERSONAL_ACCESS_TOKEN }}
        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.10'
        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry

        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - name: Release
        id: release
        env:
          GH_TOKEN: ${{ secrets.GH_PAT }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          git config --global user.email "release-bot@woxomai.com"
          git config --global user.name "Release Bot"

          latest_version=$(poetry run semantic-release print-version)

          poetry run semantic-release publish
          if [[ ! -z ${{ latest_version }} ]]; then
            echo "tag=v${{ latest_version }}" >> "$GITHUB_OUTPUT"
          else
            echo "tag=" >> "$GITHUB_OUTPUT"
          fi

  deploy:
    runs-on: ubuntu-latest
    needs: [release]
    name: "Build release"
    if: needs.release.outputs.tag != ''

    steps:
      - name: Checkout Repo
        uses: actions/checkout@v3
        with:
          ref: main
          fetch-depth: 0

      - name: Switch to correct tag
        run: |
          git checkout ${{ needs.release.outputs.tag }}
#          git submodule update --init --recursive

      - name: Deploy
        run: |
          echo "NOT YET IMPLEMENTED"
