#name: Run pipenv script
##on:
##  push:
##    branches:
##    - dev
#on:
#  workflow_call:
#    inputs:
#      PIPENV_SCRIPT:
#        type: string
#        default: "test"
#      STAGE:
#        type: string
#        default: "dev"
#permissions:
#  id-token: write # This is required for requesting the JWT
#  contents: read  # This is required for actions/checkout
#env:
#  SECRET_STORE_FRIENDLY_NAME: DevWoxomAiSecrets
#  COMMON_ACCESS_POLICY_FRIENDLY_NAME: DevCommonAccessPolicy
#  SESSION_TABLE_FRIENDLY_NAME: DevSessionTable
#  AGENT_CONFIG_TABLE_FRIENDLY_NAME: DevAgentConfigTable
#  LEAD_TABLE_FRIENDLY_NAME: DevLeadTable
#  INFRASTRUCTURE_TOPIC_FRIENDLY_NAME: InfrastructureTopic
#  BUSINESS_TOPIC_FRIENDLY_NAME: BusinessTopic
#  EVENTBUS_FRIENDLY_NAME: EventBus
#  STAGES_FRIENDLY_NAME: STAGES
#  INFRA_STACK_NAME: woxom-ai-infra
#  STAGE: ${{ inputs.STAGE }}
#  DEV_API_URL: https://dev.woxomai.com
#  PROD_API_URL: https://www.woxomai.com
#  DEV_WOXOM_API_KEY: ${{ secrets.DEV_WOXOM_API_KEY }}
#  PROD_WOXOM_API_KEY: ${{ secrets.PROD_WOXOM_API_KEY }}
#  AWS_REGION: us-east-1
#  APP_NAME: woxom-ai-api
#  PROJECT: dev-woxom-ai-api
#jobs:
#  pipenv-script:
#    runs-on: ubuntu-latest
#    timeout-minutes: 10
#
#    steps:
#      - name: Configure AWS credentials from Test account
#        uses: aws-actions/configure-aws-credentials@v3
#        with:
#          audience: sts.amazonaws.com
#          role-to-assume: arn:aws:iam::439638760367:role/GithubWoxomSolutionsOrg
#          role-session-name: ${{env.PROJECT}}-deployer
#          aws-region: ${{ env.AWS_REGION }}
#
#      - name: Check out repository code
#        uses: actions/checkout@v2
#
#      # Setup Python (faster than using Python container)
#      - name: Setup Python
#        uses: actions/setup-python@v2
#        with:
#          python-version: "3.10"
#
#      - name: Install pipenv
#        run: |
#          python -m pip install --upgrade pipenv wheel
#      - id: cache-pipenv
#        uses: actions/cache@v1
#        with:
#          path: ~/.local/share/virtualenvs
#          key: ${{ runner.os }}-pipenv-${{ hashFiles('**/Pipfile.lock') }}
#
#      - name: Install dependencies
#        if: steps.cache-pipenv.outputs.cache-hit != 'true'
#        run: |
#          pipenv install --deploy --dev
#
#      - name: Test and deploy to dev
#        run: |
#          pipenv run ${{ inputs.PIPENV_SCRIPT }}
#
