name: CI-OpenBrain üêç Deploy Infrastructure, test, and publish to PyPI

on:
  push:
    branches:
      - 'main'
      - 'dev'

env:
  PYPI_TOKEN: ${{ secrets.PYPI_TOKEN }}
  PYPI_TEST_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.GH_AWS_ACCESS_KEY_ID }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.GH_AWS_SECRET_ACCESS_KEY }}
  OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
  DEV_OB_PROVIDER_API_KEY: ${{ secrets.DEV_OB_PROVIDER_API_KEY }}
  PROD_OB_PROVIDER_API_KEY: ${{ secrets.PROD_OB_PROVIDER_API_KEY }}

  SAM_TEMPLATE: resources.yaml
  TESTING_STACK_NAME: OpenBrainPublish
  TESTING_REGION: us-east-1

  TESTING_PIPELINE_EXECUTION_ROLE: ${{ vars.TESTING_PIPELINE_EXECUTION_ROLE }}
  TESTING_CLOUDFORMATION_EXECUTION_ROLE: ${{ vars.TESTING_CLOUDFORMATION_EXECUTION_ROLE }}
  TESTING_ARTIFACTS_BUCKET: ${{ vars.TESTING_ARTIFACTS_BUCKET }}
  OB_MODE: ${{ vars.OB_MODE }}
  INFRA_STACK_NAME: ${{ vars.INFRA_STACK_NAME }}
  EVENTBUS_NAME: ${{ vars.EVENTBUS_NAME }}
  #DEV_API_URL: ${{ vars.DEV_API_URL }}
  #PROD_API_URL: ${{ vars.PROD_API_URL }}
  #OB_API_URL: ${{ vars.OB_API_URL }}


jobs:
  pre-commit-tests:
    uses: ./.github/workflows/pre-commit.yml
    name: Enforce commit standards
    secrets: inherit
    permissions:
      id-token: write
      contents: read

  deploy-infrastructure:
    name: Deploy infrastructure
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true

      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE} --use-container

      - name: Assume the testing pipeline user role
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.TESTING_REGION }}
          role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
          role-session-name: testing-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts
        run: |
          sam package \
            --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
            --region ${TESTING_REGION} \
            --output-template-file packaged-testing.yaml

      - name: Validate artifacts
        run: |
          sam validate --lint -t packaged-testing.yaml

      - uses: actions/upload-artifact@v4
        with:
          name: packaged-testing.yaml
          path: packaged-testing.yaml

      - name: Deploy to stack
        shell: bash
        run: |
          sam deploy \
              --stack-name ${TESTING_STACK_NAME} \
              --template-file packaged-testing.yaml \
              --capabilities CAPABILITY_IAM \
              --region ${TESTING_REGION} \
              --s3-bucket ${TESTING_ARTIFACTS_BUCKET} \
              --no-fail-on-empty-changeset \
              --role-arn ${TESTING_CLOUDFORMATION_EXECUTION_ROLE} \
              --parameter-overrides ResourceSuffix=Publish bucketName=ob-publish

      - name: Skip tests if release commit
        run: echo "Skipping tests for release commit"

  run-tests:
    needs: [deploy-infrastructure, pre-commit-tests]
    name: Run pytest CI/CD tests
    strategy:
      matrix:
        python-version: [ "3.10" ]
        platform: [ ubuntu-20.04 ]
    runs-on: ${{ matrix.platform }}

    steps:
    - name: Assume the testing pipeline user role
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.TESTING_REGION }}
        role-to-assume: ${{ env.TESTING_PIPELINE_EXECUTION_ROLE }}
        role-session-name: testing-packaging
        role-duration-seconds: 3600
        role-skip-session-tagging: true

      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
    - name: Check out repository
      uses: actions/checkout@v4
    - name: Set up python
      id: setup-python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
    - name: Install Poetry
      uses: snok/install-poetry@v1
      with:
        virtualenvs-create: true
        virtualenvs-in-project: true
        installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
    - name: Load cached venv
      id: cached-poetry-dependencies
      uses: actions/cache@v4
      with:
        path: .venv
        key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
    - name: Install dependencies
      if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
      run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
    - name: Install project
      run: poetry install --no-interaction

      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
    - name: Test with pytest
      run: |
        poetry run pytest tests -m "not redundant and not tools and not remote_tests"

    - name: upload pytest.log
      uses: actions/upload-artifact@v4
      with:
          name: pytest.log
          path: pytest.log


    - name: Skip tests if release commit
      run: echo "Skipping tests for release commit"

  publish-prerelease:
    if: github.ref == 'refs/heads/dev'
    needs: [run-tests]
    runs-on: ubuntu-latest
    name: Publish to PyPi test
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'
        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true


      - name: Python Semantic Release
        uses: python-semantic-release/python-semantic-release@master
        env:
          PYPI_TOKEN: ${{ secrets.PYPI_TEST_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
          PYPI_REPOSITORY: https://test.pypi.org/legacy/
          RELEASE_BRANCH: dev

  publish-release:
    if: github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    name: Publish to PyPi
    needs: [run-tests]
    outputs:
      tag: ${{ steps.bump.outputs.tag }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

        #----------------------------------------------
        #       check-out repo and set-up python
        #----------------------------------------------
#      - name: Check out repository
#        uses: actions/checkout@v4
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v5
        with:
          python-version: '3.10'

        #----------------------------------------------
        #  -----  install & configure poetry  -----
        #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

        #----------------------------------------------
        #       load cached venv if cache exists
        #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v4
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}

        #----------------------------------------------
        # install dependencies if cache does not exist
        #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root

        #----------------------------------------------
        # install your root project, if required
        #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction

      - uses: bjoluc/semantic-release-config-poetry@v2.2.0
        with:
          pypi_token: ${{ secrets.PYPI_TOKEN }}
          release_branch: ${{ github.ref_name }}
          github_token: ${{ secrets.GH_TOKEN }}

  deploy_docs:
    needs: [publish-release]
    uses: ./.github/workflows/publish_docs.yml
    secrets: inherit

  deploy_docs_prerelease:
    needs: [publish-prerelease]
    uses: ./.github/workflows/publish_docs.yml
    secrets: inherit
