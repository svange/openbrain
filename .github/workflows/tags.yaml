name: Test dev branch and deploy to pypi-test
on:
  push:
    tags:
      - "feat"
      - "fix"
      - "perf"
      - "test"

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read  # This is required for actions/checkout
env:
  AWS_GITHUB_ROLE_ARN: ${{ secrets.AWS_GITHUB_DEV_DEPLOYER_ROLE_ARN }}
  AWS_REGION: us-east-1
  PROJECT: openbrain
  REPOSITORYNAME: openbrain
  GITHUBORG: svange
  DISABLE_TUNER_API_MODE: 1
  INFRA_STACK_NAME: ai-infra
  SECRET_STORE_FRIENDLY_NAME: DevAiSecrets
  COMMON_ACCESS_POLICY_FRIENDLY_NAME: DevCommonAccessPolicy
  SESSION_TABLE_FRIENDLY_NAME: DevSessionTable
  AGENT_CONFIG_TABLE_FRIENDLY_NAME: DevAgentConfigTable
  LEAD_TABLE_FRIENDLY_NAME: DevLeadTable
  INFRASTRUCTURE_TOPIC_FRIENDLY_NAME: InfrastructureTopic
  BUSINESS_TOPIC_FRIENDLY_NAME: BusinessTopic
  EVENTBUS_FRIENDLY_NAME: DevEventBus
  OPENAI_API_KEY: ${{ secrets.DEV_OPENAI_KEY }}
jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.AWS_GITHUB_ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v3
      - name: Set up python
        id: setup-python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      #----------------------------------------------
      #  -----  install & configure poetry  -----
      #----------------------------------------------
      - name: Install Poetry
        uses: snok/install-poetry@v1
        with:
          virtualenvs-create: true
          virtualenvs-in-project: true
          installer-parallel: true

      #----------------------------------------------
      #       load cached venv if cache exists
      #----------------------------------------------
      - name: Load cached venv
        id: cached-poetry-dependencies
        uses: actions/cache@v3
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.setup-python.outputs.python-version }}-${{ hashFiles('**/poetry.lock') }}
      #----------------------------------------------
      # install dependencies if cache does not exist
      #----------------------------------------------
      - name: Install dependencies
        if: steps.cached-poetry-dependencies.outputs.cache-hit != 'true'
        run: poetry install --no-interaction --no-root
      #----------------------------------------------
      # install your root project, if required
      #----------------------------------------------
      - name: Install project
        run: poetry install --no-interaction
      #----------------------------------------------
      #              run test suite
      #----------------------------------------------
      - name: Test with pytest
        run: |
          source .venv/bin/activate
          pytest

  publish-test:
    runs-on: ubuntu-latest
    needs: test
    steps:
      #----------------------------------------------
      #              publish to test-pypi
      #----------------------------------------------
      - name: Publish Python üêç distribution üì¶ to PyPI-test
        uses: JRubics/poetry-publish@v1.17
        with:
          pypi_token: ${{ secrets.TEST_PYPI_API_KEY }}
          repository_name: "testpypi"
          repository_url: "https://test.pypi.org/legacy/"
          plugins: poetry-dynamic-versioning-plugin

  # if not on dev or master, and tag is "feat", "fix", "perf", "build", "ci"
  # merge and push to dev
  update-git-dev:
    runs-on: ubuntu-latest
    if: contains(fromJSON('["feat", "fix", "perf"]'), github.ref_name)
    needs: publish-test
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
          fetch-depth: 0
      - name: Git operations to merge and push to dev
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git fetch
          git rebase origin/dev
          git checkout dev
          git pull origin dev
          git merge --no-ff ${{ github.head_ref }}
          git commit -a -m "github-actions[bot] - ${{ github.ref_name }} - ${{ github.sha }}"
      - name: Push changes
        uses: ad-m/github-push-action@master
        with:
          branch: dev


