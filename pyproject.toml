[tool.poetry]
name = "openbrain"
version = "0.19.0"
description = "A package to interact with generative AI and build specialized generative AI workflows. This project is dual-licensed under AGPL-3.0 and a separate commercial license."
authors = ["Samuel Vange <7166607+svange@users.noreply.github.com>"]
readme = "README.md"
license = "AGPL-3.0-only"
packages = [{ include = "openbrain" }]
homepage = "https://github.com/svange/openbrain"

[tool.poetry.scripts]
ob = "openbrain.cli:cli"
ob-chat = "openbrain.cli:cli_chat"
ob-tuner = "openbrain.app:main"
ob-env = "openbrain.cli:cli_env"

[tool.poetry.plugins."commitizen.plugin"] # completely untested
cz_conventional_commits = "commitizen.cz.conventional_commits:ConventionalCommitsCz"
#cz_jira = "commitizen.cz.jira:JiraSmartCz"
cz_customize = "commitizen.cz.customize:CustomizeCommitsCz"
cargo = "commitizen.providers:CargoProvider"
commitizen = "commitizen.providers:CommitizenProvider"
composer = "commitizen.providers:ComposerProvider"
npm = "commitizen.providers:NpmProvider"
pep621 = "commitizen.providers:Pep621Provider"
poetry = "commitizen.providers:PoetryProvider"
scm = "commitizen.providers:ScmProvider"

[tool.semantic_release]
# From video
#version_source = "tag" # not in docs
#commit_version_number = true # not in docs
commit_message = "chore(release): release {version}"
# End from video
branch = "(main|dev)"
[tool.semantic_release.branches.main]
match = "main"
prerelease_token = "rc"
prerelease = false

[tool.semantic_release.branches.dev]
match = "dev"
prerelease_token = "dev"
prerelease = true

version_toml = [
    "pyproject.toml:tool.poetry.version",
]
version_variable = [
    "openbrain/__init__.py:__version__",
]
build_command = "pip install poetry && poetry build"
#logging_use_named_masks = true
major_on_zero = true
tag_format = "v{version}"
#exclude_commit_patterns = [
#    'skip: ',
#]

[tool.semantic_release.publish]
dist_glob_patterns = ["dist/*"]
upload_to_vcs_release = true
type = "github"

[tool.semantic_release.remote.token]
env = "GITHUB_TOKEN"
fallback_env = "GH_TOKEN"



[tool.commitizen]
name = "cz_conventional_commits"
tag_format = "v$version"
version_scheme = "SemVer"
version_provider = "poetry" #"scm"
update_changelog_on_bump = true
major_version_zero = true
#version = "3.9.1"
#version_files = [
#  "pyproject.toml:version",
#  "openbrain/__version__.py",
#  ".pre-commit-config.yaml:rev:.+Openbrain",
#]

[tool.poetry.plugins."commitizen.scheme"]
pep440 = "commitizen.version_schemes:Pep440"
semver = "commitizen.version_schemes:SemVer"

[tool.poetry.dependencies]
python = "^3.10"
boto3 = "^1.28.51"
langchain = ">=0.0.295,<0.0.305"
openai = "^0.28.0"
promptlayer = ">=0.2.9,<0.4.0"
requests = "^2.31.0"
pydantic = "^2.3.0"
aws-lambda-powertools = "^2.25.0"
python-dotenv = "^1.0.0"
python-ulid = "^1.1.0"
aws-xray-sdk = "^2.12.0"
tiktoken = "^0.5.1"
#pillow = {version = "^10.0.1", optional = true}
gradio = { version = "^3.44.0", optional = true }
#image = {version = "^1.5.33", optional = true}

[tool.poetry.extras]
gradio = ["gradio"]
#gradio = ["image"]


[tool.poetry.group.dev.dependencies]
pytest = "^7.4.2"
faker = "^19.6.1"
retry = "^0.9.2"
flake8 = "^6.1.0"
black = "^23.9.1"
reorder-python-imports = "^3.10.0"
python-semantic-release = "^8.1.1"
ruff = "^0.0.291"
mypy = "^1.5.1"
commitizen = "^3.9.1"
isort = "^5.12.0"
pre-commit = "^3.4.0"

[tool.coverage] # not tested
[tool.coverage.report]
show_missing = true
exclude_lines = [
    # Have to re-enable the standard pragma
    'pragma: no cover',
    # Don't complain about missing debug-only code:
    'def __repr__',
    'if self\.debug',
    # Don't complain if tests don't hit defensive assertion code:
    'raise AssertionError',
    'raise NotImplementedError',
    # Don't complain if non-runnable code isn't run:
    'if 0:',
    'if __name__ == .__main__.:',
    'if TYPE_CHECKING:',
]
omit = [
    'env/*',
    'venv/*',
    '.venv/*',
    '*/virtualenv/*',
    '*/virtualenvs/*',
    '*/tests/*',
]

[tool.pytest.ini_options]
addopts = '-m "not remote_tests and not redundant"'

[tool.ruff]
line-length = 130
ignore = [
    "E501",
    "D1",
    "D415"
]
# Enable pycodestyle (`E`) and Pyflakes (`F`) codes by default.
select = ["E", "F"]

[tool.ruff.isort]
known-first-party = ["commitizen", "tests"]

[tool.ruff.pydocstyle]
convention = "google"

[tool.mypy]
files = "commitizen"
disallow_untyped_decorators = true
disallow_subclassing_any = true
warn_return_any = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true

[[tool.mypy.overrides]]
module = "py.*"  # Legacy pytest dependencies
ignore_missing_imports = true

[tool.black]
line-length = 130
target-version = ['py310']
include = '\.pyi?$'
exclude = '''
/(
    \.git
| \.hg
| \.mypy_cache
| \.tox
| \.venv
| _build
| buck-out
| build
)/
'''

[tool.flake8]
max-line-length = 130
extend-ignore = ["D203", "E203", "E251", "E266", "E302", "E305", "E401", "E402", "E501", "F401", "F403", "W503"]
exclude = [".git", "__pycache__", "dist"]
max-complexity = 10

[tool.isort]
atomic = true
profile = "black"
line_length = 130
skip_gitignore = true

# Allow autofix for all enabled rules (when `--fix`) is provided.
fixable = ["A", "B", "C", "D", "E", "F", "G", "I", "N", "Q", "S", "T", "W", "ANN", "ARG", "BLE", "COM", "DJ", "DTZ", "EM", "ERA", "EXE", "FBT", "ICN", "INP", "ISC", "NPY", "PD", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "RET", "RSE", "RUF", "SIM", "SLF", "TCH", "TID", "TRY", "UP", "YTT"]
unfixable = []

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "venv",
]

# Same as Black.
line-length = 130

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

target-version = "py310"
